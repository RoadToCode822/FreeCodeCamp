var largest = 0;
var num = [];
function largestOfFour(arr) {
  for (i=0; i<arr.length; i++){
  var subArray = arr[i];
  for (j = 0; j < subArray.length; j++){
      if(largest < subArray[j]) {
        largest = subArray[j];
      }
    }
  num.push(largest);
  }
  return num;
}
largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);
//Yields [5,27,39,1001], but FCC shows this code to be incorrect.

//------------------------------------------------------------------------------------------------------------------------------
// Correct answer using loops:
/*
function largestOfFour(arr) {
  var largest = 0;
  var num = [];
  for (i=0; i<arr.length; i++){
  var subArray = arr[i];
  for (j = 0; j < subArray.length; j++){
    if(largest < subArray[j]) {
      largest = subArray[j];
    }
    }
   num.push(largest);
   largest = 0;
  }
  return num;
}
largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1,2,3,4]]);
*/

//------------------------------------------------------------------------------------------------------------------------------
//Using Math Object
/*
var largest = 0;
var num = [];
function largestOfFour(arr) {
  for (i=0; i<arr.length; i++){
  var subArray = arr[i];
  var largest = Math.max(subArray[i]);
  num.push(largest);
  }
  return num;
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);
*/



//Correct answer using Javascript's math object
/*
function largestOfFour(arr) {
  var num = [];
  for (var i=0; i<arr.length; i++) {
    var subArray = arr[i];      
       var largest = Math.max.apply(Math, subArray);
        num.push(largest);
} 
  return num;
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);
*/
